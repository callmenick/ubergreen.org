/**
 * Greyscale color map
 * @type {Map}
 */
$greyscale: (
  0: #ffffff,
  50: #fcfbfa,
  100: #f9f8f6,
  200: #f3f1ee,
  300: #e7e6e4,
  400: #c4c3c0,
  500: #9c9c9b,
  600: #82817d,
  700: #575553,
  900: #2a2825,
  1000: #000000
);

/**
 * Takes in a number representation on the greyscale and returns a hex color
 * @param {Number} $size
 * @return {String}
 */
@function grey($i) {
  @if (type-of($i) != "number") {
    @warn "You must supply a number to this function.";
  }

  @if ($i < 0) {
    @return map-get($greyscale, 0);
  } @else if ($i > 1000) {
    @return map-get($greyscale, 1000);
  } @else if (map-has-key($greyscale, $i)) {
    @return map-get($greyscale, $i);
  } @else {
    $i: round($i / 100) * 100;
    @return map-get($greyscale, $i);
  }
}

/**
 * Primary color map
 * @type {Map}
 */
$colors: (
  "bubblegum": #ef52d1,
  "gold": #fcdf35,
  "mintgreen": #43edac,
  "pumpkin": #ffa039,
  "strawberry": #ef4b62,
  "red": #d0021b,
  "pink": #e27dd1,
);

/**
 * Takes in a number representation on the colors map and returns a hex color
 * @param {Number} $size
 * @return {String}
 */
@function color($color) {
  @if (type-of($color) != "string") {
    @warn "You must supply a string to this function.";
  }

  @if (map-has-key($colors, $color)) {
    @return map-get($colors, $color);
  } @else {
    @warn "$color doesn't exist in $colors.";
    @return defaultMapValue($colors);
  }
}
